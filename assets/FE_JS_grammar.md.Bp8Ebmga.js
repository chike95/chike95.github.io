import{_ as a,c as e,o as r,a4 as t}from"./chunks/framework.4aTu-Nia.js";const f=JSON.parse('{"title":"语法","description":"","frontmatter":{},"headers":[],"relativePath":"FE/JS/grammar.md","filePath":"FE/JS/grammar.md"}'),h={name:"FE/JS/grammar.md"},i=t(`<h1 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h1><p>英文：grammar</p><h2 id="空白" tabindex="-1">空白 <a class="header-anchor" href="#空白" aria-label="Permalink to &quot;空白&quot;">​</a></h2><p>空白可能表现为被格式化的字符或者注释。通常没有意义，用来分隔字符序列。</p><h3 id="空格" tabindex="-1">空格 <a class="header-anchor" href="#空格" aria-label="Permalink to &quot;空格&quot;">​</a></h3><p>var that = this;</p><p>var 与 that 的空格不能移除</p><h3 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h3><p>优先用于提高代码的可读性，且没有用的注释比没有注释更糟糕。</p><h4 id="单行注释" tabindex="-1">单行注释 <a class="header-anchor" href="#单行注释" aria-label="Permalink to &quot;单行注释&quot;">​</a></h4><p>注释形式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 注释内容</span></span></code></pre></div><h4 id="多行注释" tabindex="-1">多行注释 <a class="header-anchor" href="#多行注释" aria-label="Permalink to &quot;多行注释&quot;">​</a></h4><p>注释形式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span>*  注释内容</span></span>
<span class="line"><span>*/</span></span></code></pre></div><p>一般用于注释 js 文件或者函数，注释内容可以换行。</p><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><h2 id="变量声明" tabindex="-1">变量声明 <a class="header-anchor" href="#变量声明" aria-label="Permalink to &quot;变量声明&quot;">​</a></h2><h3 id="命名规则" tabindex="-1">命名规则 <a class="header-anchor" href="#命名规则" aria-label="Permalink to &quot;命名规则&quot;">​</a></h3><p>JS 中的变量是弱类型可以保存所有类型的数据，即变量没有类型而值有类型。变量名以字母、$、_ 开始，后跟字母、数字、_。</p><p>JS 语言关键字不能用来做变量名，比如 true、if、while、class 等。</p><h3 id="变量声明-1" tabindex="-1">变量声明 <a class="header-anchor" href="#变量声明-1" aria-label="Permalink to &quot;变量声明&quot;">​</a></h3><p>var 声明变量，let 声明块级作用域变量，const 声明常量。</p><h3 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-label="Permalink to &quot;变量提升&quot;">​</a></h3><p>解析器会先解析代码，然后把声明的变量的声明提升到最前，这就叫做变量提升。</p><p>JS 中的变量声明会被提升到作用域的顶部，但赋值不会被提升。</p><h3 id="弱类型" tabindex="-1">弱类型 <a class="header-anchor" href="#弱类型" aria-label="Permalink to &quot;弱类型&quot;">​</a></h3><p>JS 中的变量是弱类型可以保存所有类型的数据，即变量没有类型而值有类型。</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><h3 id="复合运算符" tabindex="-1">复合运算符 <a class="header-anchor" href="#复合运算符" aria-label="Permalink to &quot;复合运算符&quot;">​</a></h3><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><h2 id="流程控制" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制" aria-label="Permalink to &quot;流程控制&quot;">​</a></h2><h3 id="if" tabindex="-1">if <a class="header-anchor" href="#if" aria-label="Permalink to &quot;if&quot;">​</a></h3><h3 id="switch" tabindex="-1">switch <a class="header-anchor" href="#switch" aria-label="Permalink to &quot;switch&quot;">​</a></h3><h3 id="while" tabindex="-1">while <a class="header-anchor" href="#while" aria-label="Permalink to &quot;while&quot;">​</a></h3><h3 id="for" tabindex="-1">for <a class="header-anchor" href="#for" aria-label="Permalink to &quot;for&quot;">​</a></h3><h4 id="for-in" tabindex="-1">for in <a class="header-anchor" href="#for-in" aria-label="Permalink to &quot;for in&quot;">​</a></h4><h4 id="for-of" tabindex="-1">for of <a class="header-anchor" href="#for-of" aria-label="Permalink to &quot;for of&quot;">​</a></h4>`,42),o=[i];function l(n,s,d,c,p,u){return r(),e("div",null,o)}const q=a(h,[["render",l]]);export{f as __pageData,q as default};
