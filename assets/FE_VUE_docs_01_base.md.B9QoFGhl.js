import{_ as s,c as a,o as n,a4 as e}from"./chunks/framework.4aTu-Nia.js";const v=JSON.parse('{"title":"一、知识简介","description":"","frontmatter":{},"headers":[],"relativePath":"FE/VUE/docs/01_base.md","filePath":"FE/VUE/docs/01_base.md"}'),p={name:"FE/VUE/docs/01_base.md"},l=e(`<h1 id="一、知识简介" tabindex="-1">一、知识简介 <a class="header-anchor" href="#一、知识简介" aria-label="Permalink to &quot;一、知识简介&quot;">​</a></h1><p>官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">https://cn.vuejs.org/</a></p><p>渐进式 JavaScript 框架，易学易用，性能出色，适用场景丰富的 Web 前端框架。</p><h2 id="vue-cli" tabindex="-1">vue-cli <a class="header-anchor" href="#vue-cli" aria-label="Permalink to &quot;vue-cli&quot;">​</a></h2><p>全局安装 Vue 脚手架</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install -g @vue/cli</span></span></code></pre></div><p>产看 vue-cli 版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>vue -V</span></span></code></pre></div><p>升级脚手架</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm update -g @vue/cli</span></span></code></pre></div><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>vue create xxx项目名</span></span>
<span class="line"><span></span></span>
<span class="line"><span>? Please pick a preset:</span></span>
<span class="line"><span>  Default ([Vue 3] babel, eslint)</span></span>
<span class="line"><span>  Default ([Vue 2] babel, eslint)</span></span>
<span class="line"><span>&gt; Manually select features      // 选择手动配置</span></span>
<span class="line"><span></span></span>
<span class="line"><span>? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to</span></span>
<span class="line"><span>toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span></span>
<span class="line"><span> (*) Babel</span></span>
<span class="line"><span> ( ) TypeScript</span></span>
<span class="line"><span> ( ) Progressive Web App (PWA) Support</span></span>
<span class="line"><span> (*) Router</span></span>
<span class="line"><span> (*) Vuex</span></span>
<span class="line"><span>&gt;(*) CSS Pre-processors</span></span>
<span class="line"><span> (*) Linter / Formatter</span></span>
<span class="line"><span> ( ) Unit Testing</span></span>
<span class="line"><span> ( ) E2E Testing</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Choose a version of Vue.js that you want to start the project with (Use arrow</span></span>
<span class="line"><span>keys)</span></span>
<span class="line"><span>&gt; 3.x</span></span>
<span class="line"><span>  2.x</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Use class-style component syntax? 【使用类风格的组件语法?】（选择：Y）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? 【使用Babel和TypeScript(现代模式需要，自动检测填充，置换JSX)? 】</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Use history mode for router? (Requires proper server setup for index fallback in production)【使用历史模式的路由器?(需要为生产环境中的索引回退进行适当的服务器设置) 】</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supportedby default): (Use arrow keys)</span></span>
<span class="line"><span>&gt; Sass/SCSS (with dart-sass)</span></span>
<span class="line"><span>  Less</span></span>
<span class="line"><span>  Stylus</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Pick a linter / formatter config:</span></span>
<span class="line"><span>  ESLint with error prevention only</span></span>
<span class="line"><span>  ESLint + Airbnb config</span></span>
<span class="line"><span>&gt; ESLint + Standard config</span></span>
<span class="line"><span>  ESLint + Prettier</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all,</span></span>
<span class="line"><span>&lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span></span>
<span class="line"><span> (*) Lint on save</span></span>
<span class="line"><span>&gt;(*) Lint and fix on commit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</span></span>
<span class="line"><span>&gt; In dedicated config files     // 单独的配置文件</span></span>
<span class="line"><span>  In package.json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Save this as a preset for future projects? (y/N) n</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Pick the package manager to use when installing dependencies:</span></span>
<span class="line"><span>&gt; Use PNPM</span></span>
<span class="line"><span>  Use NPM</span></span></code></pre></div><p>CDN 使用 Vue</p><p>解构 Vue 方法</p><p>使用 ES 模块构建版本</p><h3 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h3><p>文本插值</p><p>原始 HTML</p><h3 id="reactive-和-ref" tabindex="-1">reactive 和 ref <a class="header-anchor" href="#reactive-和-ref" aria-label="Permalink to &quot;reactive 和 ref&quot;">​</a></h3><p>reactive 和 ref 是 Vue 3 中的两种响应式数据绑定方式，ref 适用于简单的响应式数据，而 reactive 则适用于复杂对象或数组的响应式数据。</p><p>(1) 数据类型不同</p><p>ref：将一个普通的 JavaScript 值包装成响应式的引用类型。可以理解为 ref 是对普通值的包装。</p><p>reactive：将一个普通的 JavaScript 对象（或数组）转换为响应式代理对象。可以理解为 reactive 是对对象（或数组）的包装。</p><p>(2) 访问方式不同</p><p>ref：使用 .value 属性来访问和修改值。</p><p>reactive：可以直接访问和修改对象或数组的属性或元素，而无需使用 .value。</p><p>(3) 更新触发方式不同：</p><p>ref：通过 ref() 或 .value 的赋值来触发更新。</p><p>reactive：通过直接修改对象或数组的属性或元素来触发更新。</p><h3 id="图片轮播" tabindex="-1">图片轮播 <a class="header-anchor" href="#图片轮播" aria-label="Permalink to &quot;图片轮播&quot;">​</a></h3>`,30),t=[l];function i(c,r,o,d,u,h){return n(),a("div",null,t)}const f=s(p,[["render",i]]);export{v as __pageData,f as default};
