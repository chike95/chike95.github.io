import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.4aTu-Nia.js";const g=JSON.parse('{"title":"windows","description":"","frontmatter":{},"headers":[],"relativePath":"RD/windows/index.md","filePath":"RD/windows/index.md"}'),e={name:"RD/windows/index.md"},h=t(`<h1 id="windows" tabindex="-1">windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;windows&quot;">​</a></h1><h3 id="批量重命名文件" tabindex="-1">批量重命名文件 <a class="header-anchor" href="#批量重命名文件" aria-label="Permalink to &quot;批量重命名文件&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get-ChildItem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;D:\\project\\chike\\docs&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;README.md&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Recurse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rename-Item</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -NewName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $_</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.Name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -replace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;README.md&#39;,&#39;index.md&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span></span></code></pre></div><p>这个 PowerShell 命令使用 Get-ChildItem 在指定目录中递归查找所有 README.md 文件，并使用 Rename-Item 将它们重命名为 index.md。</p><h3 id="创建文件" tabindex="-1">创建文件 <a class="header-anchor" href="#创建文件" aria-label="Permalink to &quot;创建文件&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename.txt</span></span></code></pre></div><h3 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-label="Permalink to &quot;进程管理&quot;">​</a></h3><p>在 Windows 中查看指定端口的进程可以使用命令行工具 netstat</p><p>打开命令提示符（按 Win+R 键，输入 cmd 并回车）。</p><p>在命令提示符窗口中输入以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">netstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ano</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findstr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :9003</span></span></code></pre></div><p>此时会显示使用 9003 端口的进程信息，包括 PID（进程标识符）。PID 可以用于终止该进程。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TCP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    0.0.0.0:9003</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           0.0.0.0:0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              LISTENING</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       1688</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TCP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [::]:9003              [::]:0                 LISTENING       1688</span></span></code></pre></div><p>如果要终止使用该端口的进程，可以使用任务管理器或者命令行工具 taskkill。例如，要终止 PID 为 1688 的进程，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taskkill</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /pid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1688</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /f</span></span></code></pre></div>`,15),n=[h];function l(p,k,d,o,r,c){return a(),i("div",null,n)}const C=s(e,[["render",l]]);export{g as __pageData,C as default};
