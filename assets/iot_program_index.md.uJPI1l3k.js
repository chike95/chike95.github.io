import{_ as a,c as e,o as r,a4 as t}from"./chunks/framework.4aTu-Nia.js";const b=JSON.parse('{"title":"编程思想","description":"","frontmatter":{},"headers":[],"relativePath":"iot/program/index.md","filePath":"iot/program/index.md"}'),i={name:"iot/program/index.md"},o=t('<h1 id="编程思想" tabindex="-1">编程思想 <a class="header-anchor" href="#编程思想" aria-label="Permalink to &quot;编程思想&quot;">​</a></h1><p>排行榜：<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noreferrer">https://www.tiobe.com/tiobe-index/</a></p><h2 id="仓颉编程语言" tabindex="-1">仓颉编程语言 <a class="header-anchor" href="#仓颉编程语言" aria-label="Permalink to &quot;仓颉编程语言&quot;">​</a></h2><p>文档：<a href="https://developer.huawei.com/consumer/cn/doc/openharmony-cangjie/cj-wp-abstract" target="_blank" rel="noreferrer">https://developer.huawei.com/consumer/cn/doc/openharmony-cangjie/cj-wp-abstract</a></p><h2 id="编程范式" tabindex="-1">编程范式 <a class="header-anchor" href="#编程范式" aria-label="Permalink to &quot;编程范式&quot;">​</a></h2><h3 id="面向对象编程" tabindex="-1">面向对象编程 <a class="header-anchor" href="#面向对象编程" aria-label="Permalink to &quot;面向对象编程&quot;">​</a></h3><ul><li><p>封装、继承、多态</p></li><li><p>抽象现象生活中的事物特征，对于理解友好</p></li><li><p>java c#</p></li></ul><h3 id="面向过程编程" tabindex="-1">面向过程编程 <a class="header-anchor" href="#面向过程编程" aria-label="Permalink to &quot;面向过程编程&quot;">​</a></h3><h3 id="函数式编程" tabindex="-1">函数式编程 <a class="header-anchor" href="#函数式编程" aria-label="Permalink to &quot;函数式编程&quot;">​</a></h3><ul><li><p>确定的数据输入、输出；没有副作用，相对独立</p></li><li><p>引用透明、对 IDE 友好、易于理解</p></li></ul><p>－ vue / react 的书写方式</p><h3 id="函数式响应编程" tabindex="-1">函数式响应编程 <a class="header-anchor" href="#函数式响应编程" aria-label="Permalink to &quot;函数式响应编程&quot;">​</a></h3><ul><li><p>适合需要对事件流进行复杂组合应用的场景</p></li><li><p>响应式多用在异步的场景</p></li><li><p>典型案例：rxjs，广告推荐</p></li></ul><h3 id="面向切面编程-aop" tabindex="-1">面向切面编程 AOP <a class="header-anchor" href="#面向切面编程-aop" aria-label="Permalink to &quot;面向切面编程 AOP&quot;">​</a></h3><p>面向对象的补充</p><ul><li><p>扩展功能方便，不影响业务之间的逻辑</p></li><li><p>逻辑集中管理</p></li><li><p>利于代码复用</p></li><li><p>典型案例：nestjs</p></li></ul><h2 id="未定义" tabindex="-1">未定义 <a class="header-anchor" href="#未定义" aria-label="Permalink to &quot;未定义&quot;">​</a></h2><h3 id="接口设计" tabindex="-1">接口设计 <a class="header-anchor" href="#接口设计" aria-label="Permalink to &quot;接口设计&quot;">​</a></h3><p>接口是对抽象能力的抽象，接口是抽象能力的集合。</p><p>企鹅不会飞是&quot;真的不会飞&quot;?</p><p>接口不是用来抽象自身的“内在能力”（扇翅膀），而是用来反映外部可观测的效应（真的能飞起来），扇翅膀这个没有实际作用的能力抽象出来是不具有意义的。</p><p>接口实现抛异常不是好设计，只是对坏设计的无可奈何的补救。</p><h3 id="组合、继承" tabindex="-1">组合、继承 <a class="header-anchor" href="#组合、继承" aria-label="Permalink to &quot;组合、继承&quot;">​</a></h3>',23),l=[o];function n(h,p,c,d,s,u){return r(),e("div",null,l)}const _=a(i,[["render",n]]);export{b as __pageData,_ as default};
