import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.4aTu-Nia.js";const t="/assets/image-8.zqpP4_u6.png",l="/assets/image-9.CMofylRL.png",m=JSON.parse('{"title":"项目规范","description":"","frontmatter":{},"headers":[],"relativePath":"RD/node/nest/specification.md","filePath":"RD/node/nest/specification.md"}'),n={name:"RD/node/nest/specification.md"},r=e(`<h1 id="项目规范" tabindex="-1">项目规范 <a class="header-anchor" href="#项目规范" aria-label="Permalink to &quot;项目规范&quot;">​</a></h1><p>约定大于配置</p><h2 id="工程目录" tabindex="-1">工程目录 <a class="header-anchor" href="#工程目录" aria-label="Permalink to &quot;工程目录&quot;">​</a></h2><h3 id="作者推荐" tabindex="-1">作者推荐 <a class="header-anchor" href="#作者推荐" aria-label="Permalink to &quot;作者推荐&quot;">​</a></h3><p>链接：<a href="https://github.com/nestjs/nest/issues/2249" target="_blank" rel="noreferrer">https://github.com/nestjs/nest/issues/2249</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> common</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> middleware</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> interceptors</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> guards</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> interceptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scoped </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">interceptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.controller.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.model.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store.controller.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store.model.ts</span></span></code></pre></div><ul><li><p>没有模块目录，按照功能进行划分。</p></li><li><p>把通用的东西归为单独的目录:common，比如:拦截器/守卫/管道</p></li></ul><h3 id="参考1" tabindex="-1">参考1 <a class="header-anchor" href="#参考1" aria-label="Permalink to &quot;参考1&quot;">​</a></h3><p>地址：<a href="https://github.com/kentloog/nestjs-sequelize-typescript" target="_blank" rel="noreferrer">https://github.com/kentloog/nestjs-sequelize-typescript</a></p><p>特点:</p><ul><li>项目文档及相关的资源在根目录</li><li>数据库及项目配置会放在根目录(细节:数据库升级文件)</li><li>sze中会对功能进行划分建不同的文件夹users、posts</li><li>单个功能文件夹中，会包括一个完整CURD的相关文件(dto/controller/module/providers/service)</li><li>抽离公共配置到 shared 文件夹</li></ul><h3 id="参考项目2" tabindex="-1">参考项目2 <a class="header-anchor" href="#参考项目2" aria-label="Permalink to &quot;参考项目2&quot;">​</a></h3><p>地址：<a href="https://github.com/International-Slackline-Association/Rankings-Backend" target="_blank" rel="noreferrer">https://github.com/International-Slackline-Association/Rankings-Backend</a></p><p>特点:</p><ul><li>根目录中存放webpack、微服务配置+项目文档</li><li>src中会对功能进行划分建不同的文件夹:api、core、dynamodb-stream、image-resizer</li><li>在核心模块中，按照功能模块进划分，与之相关的entity、service放置在同一文件夹中</li><li>抽离公共配置到shared文件夹:常量、自定义的装饰器、统一错误处理、过滤器、生成器、守卫、日志服务</li></ul><h3 id="参考项目3" tabindex="-1">参考项目3 <a class="header-anchor" href="#参考项目3" aria-label="Permalink to &quot;参考项目3&quot;">​</a></h3><p>国人 CMS BLOG</p><p>地址：<a href="https://github.com/surmon-china/nodepress/" target="_blank" rel="noreferrer">https://github.com/surmon-china/nodepress/</a></p><h3 id="参考项目4-推荐" tabindex="-1">参考项目4（推荐） <a class="header-anchor" href="#参考项目4-推荐" aria-label="Permalink to &quot;参考项目4（推荐）&quot;">​</a></h3><p>地址：<a href="https://github.com/CatsMiaow/nestjs-project-structure" target="_blank" rel="noreferrer">https://github.com/CatsMiaow/nestjs-project-structure</a></p><p><img src="`+t+'" alt="alt text" data-fancybox="gallery"></p><p>功能模块</p><p><img src="'+l+'" alt="alt text" data-fancybox="gallery"></p><p>特点:</p><ul><li>项目文档及相关的资源在根目录，包括typings、test、bin</li><li>src 中会对功能进行划分建不同的文件夹</li><li>抽离公共代码到common 文件夹，配置文件放在config文件夹，实体类放置在entity中</li><li>鉴权相关的逻辑放在 auth</li><li>把同类的guards、filters、decorators、interceptors、interfaces、errors存放在common文件夹中</li></ul><h2 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h2><p>我们对Angular风格指南进行了摘抄，如下:参考:Angular风格指南</p><h3 id="总则" tabindex="-1">总则 <a class="header-anchor" href="#总则" aria-label="Permalink to &quot;总则&quot;">​</a></h3><ul><li><p>坚持每个文件只定义一样东西(例如服务或组件)考虑把文件大小限制在 400 行代码以内</p></li><li><p>坚持定义简单函数</p></li><li><p>考虑限制在 75 行之内</p></li></ul><h3 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h3><ul><li><p>坚持所有符号使用一致的命名规则</p></li><li><p>坚持遵循同一个模式来描述符号的特性和类型</p></li><li><p>使用点和横杠来分隔文件名</p></li><li><p>坚持 在描述性名字中，用横杠来分隔单词。</p></li><li><p>坚持使用点来分隔描述性名字和类型。</p></li><li><p>坚持遵循先描述组件特性，再描述它的类型的模式，对所有组件使用一致的类型命名规则。推荐的模式为feature.type.tso</p></li><li><p>坚持使用惯用的后缀来描述类型，如*.service、<em>.component、</em>.pipe、.module、.directive。必要时可以创建更多类型名，但必须注意，不要创建太多</p></li></ul><h3 id="符号名与文件名" tabindex="-1">符号名与文件名 <a class="header-anchor" href="#符号名与文件名" aria-label="Permalink to &quot;符号名与文件名&quot;">​</a></h3><ul><li><p>坚持为所有东西使用一致的命名约定，以它们所代表的东西命名。</p></li><li><p>坚持使用大写驼峰命名法来命名类</p></li><li><p>坚持匹配符号名与它所在的文件名</p></li><li><p>坚持在符号名后面追加约定的类型后缀(例如Uomponent、Directive、Module、pipe、service ) UserModule</p></li><li><p>坚持在文件名后面追加约定的类型后缀(例如 .module.ts、pipe.ts、.service.ts).component.ts、.directive.ts</p></li><li><p>坚持使用中线命名法(dashed-case)或叫烤串命名法(kebab-case)来命名组件的元素选择器。</p></li></ul>',33),p=[r];function h(o,c,k,d,u,g){return a(),i("div",null,p)}const b=s(n,[["render",h]]);export{m as __pageData,b as default};
