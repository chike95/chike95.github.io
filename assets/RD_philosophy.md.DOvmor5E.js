import{_ as a,c as e,o as l,a4 as i}from"./chunks/framework.4aTu-Nia.js";const t="/assets/image-2.BGDwac4e.png",r="/assets/image-3.BuHHJize.png",o="/assets/image.COx4ylVO.png",f=JSON.parse('{"title":"后端开发哲学","description":"","frontmatter":{},"headers":[],"relativePath":"RD/philosophy.md","filePath":"RD/philosophy.md"}'),h={name:"RD/philosophy.md"},p=i('<h1 id="后端开发哲学" tabindex="-1">后端开发哲学 <a class="header-anchor" href="#后端开发哲学" aria-label="Permalink to &quot;后端开发哲学&quot;">​</a></h1><h3 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h3><p><img src="'+t+'" alt="alt text" data-fancybox="gallery"></p><p><img src="'+r+'" alt="alt text" data-fancybox="gallery"></p><h3 id="知识图谱" tabindex="-1">知识图谱 <a class="header-anchor" href="#知识图谱" aria-label="Permalink to &quot;知识图谱&quot;">​</a></h3><p><img src="'+o+'" alt="alt text" data-fancybox="gallery"></p><p>语言</p><p>自动化</p><p>框架</p><p>环境</p><p>设计模式</p><h2 id="编程范式" tabindex="-1">编程范式 <a class="header-anchor" href="#编程范式" aria-label="Permalink to &quot;编程范式&quot;">​</a></h2><h3 id="面向对象编程" tabindex="-1">面向对象编程 <a class="header-anchor" href="#面向对象编程" aria-label="Permalink to &quot;面向对象编程&quot;">​</a></h3><ul><li><p>封装、继承、多态</p></li><li><p>抽象现象生活中的事物特征，对于理解友好</p></li><li><p>java c#</p></li></ul><h3 id="面向过程编程" tabindex="-1">面向过程编程 <a class="header-anchor" href="#面向过程编程" aria-label="Permalink to &quot;面向过程编程&quot;">​</a></h3><h3 id="函数式编程" tabindex="-1">函数式编程 <a class="header-anchor" href="#函数式编程" aria-label="Permalink to &quot;函数式编程&quot;">​</a></h3><ul><li><p>确定的数据输入、输出；没有副作用，相对独立</p></li><li><p>引用透明、对 IDE 友好、易于理解</p></li></ul><p>－ vue / react 的书写方式</p><h3 id="函数式响应编程" tabindex="-1">函数式响应编程 <a class="header-anchor" href="#函数式响应编程" aria-label="Permalink to &quot;函数式响应编程&quot;">​</a></h3><ul><li><p>适合需要对事件流进行复杂组合应用的场景</p></li><li><p>响应式多用在异步的场景</p></li><li><p>典型案例：rxjs，广告推荐</p></li></ul><h3 id="面向切面编程-aop" tabindex="-1">面向切面编程 AOP <a class="header-anchor" href="#面向切面编程-aop" aria-label="Permalink to &quot;面向切面编程 AOP&quot;">​</a></h3><p>面向对象的补充</p><ul><li><p>扩展功能方便，不影响业务之间的逻辑</p></li><li><p>逻辑集中管理</p></li><li><p>利于代码复用</p></li><li><p>典型案例：nestjs</p></li></ul><h2 id="后端设计" tabindex="-1">后端设计 <a class="header-anchor" href="#后端设计" aria-label="Permalink to &quot;后端设计&quot;">​</a></h2><h3 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h3><ul><li><p>项目用户最痛点的问题是什么？是角色设计？</p></li><li><p>用户功能的最小闭环是什么？内容查询&amp;筛选？</p></li><li><p>辅助最小闭环的实现到项目上线，需要什么技术&amp;方案？</p></li></ul><h3 id="技术栈选型" tabindex="-1">技术栈选型 <a class="header-anchor" href="#技术栈选型" aria-label="Permalink to &quot;技术栈选型&quot;">​</a></h3><h3 id="通用接口服务设计" tabindex="-1">通用接口服务设计 <a class="header-anchor" href="#通用接口服务设计" aria-label="Permalink to &quot;通用接口服务设计&quot;">​</a></h3><ul><li><p>接口服务：服务可靠、可拓展的 web 服务，集成数据库+redis</p></li><li><p>实现最小闭环：接口 CURD、登录注册（认证）、权限控制（鉴权）</p></li><li><p>服务部署与测试 -&gt; 提供文档（需求、测试、部署、产品）</p></li></ul><h3 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h3><h3 id="接口设计" tabindex="-1">接口设计 <a class="header-anchor" href="#接口设计" aria-label="Permalink to &quot;接口设计&quot;">​</a></h3><p>接口是对抽象能力的抽象，接口是抽象能力的集合。</p><p>企鹅不会飞是&quot;真的不会飞&quot;了?</p><p>接口不是用来抽象自身的“内在能力”（扇翅膀），而是用来反映外部可观测的效应（真的能飞起来）。扇翅膀这个没有实际作用的能力抽象出来有什么用，卖萌吗？ 接口实现抛异常不是好设计，只是对坏设计的无可奈何的补救。</p><h3 id="组合、继承" tabindex="-1">组合、继承 <a class="header-anchor" href="#组合、继承" aria-label="Permalink to &quot;组合、继承&quot;">​</a></h3>',35),s=[p];function n(d,c,u,b,m,q){return l(),e("div",null,s)}const x=a(h,[["render",n]]);export{f as __pageData,x as default};
