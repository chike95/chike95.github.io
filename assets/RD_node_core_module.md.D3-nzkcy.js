import{_ as e,c as o,o as a,a4 as t}from"./chunks/framework.4aTu-Nia.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"RD/node/core/module.md","filePath":"RD/node/core/module.md"}'),n={name:"RD/node/core/module.md"},r=t('<h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><p>node.js使用common.js模块管理，common.js 是2009年制定的模块标准。</p><p>ESM: 之所以不使用ES6 module，因为node.js推出时javascript还没有ES6 Module。</p><h4 id="模块特点" tabindex="-1">模块特点 <a class="header-anchor" href="#模块特点" aria-label="Permalink to &quot;模块特点&quot;">​</a></h4><p>代码拆分</p><p>相互独立</p><p>导入导出</p><h4 id="模块规范" tabindex="-1">模块规范 <a class="header-anchor" href="#模块规范" aria-label="Permalink to &quot;模块规范&quot;">​</a></h4><p>CommonJS: 同步加载，加载一个文件时，必须等待文件加载完成，才能执行后面的代码。</p><p>AMD: 异步加载，加载一个文件时，不会阻塞后面的代码。</p><p>CMD: 异步加载，加载一个文件时，不会阻塞后面的代码。</p><p>ES6 Module: 异步加载，加载一个文件时，不会阻塞后面的代码。</p><h3 id="esm" tabindex="-1">ESM <a class="header-anchor" href="#esm" aria-label="Permalink to &quot;ESM&quot;">​</a></h3><p>$ node im.js</p><p>(node:7688) Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</p><p>(Use <code>node --trace-warnings ...</code> to show where the warning was created)</p><p>方法一：修改文件后缀名</p><p>方法二：修改配置文件</p>',18),d=[r];function s(p,c,i,l,h,m){return a(),o("div",null,d)}const S=e(n,[["render",s]]);export{_ as __pageData,S as default};
